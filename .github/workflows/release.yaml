name: Publish package to GitHub Packages
on:
  push:
    branches:
      - master
  release:
    types: [created]
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: github
          cache: maven
          token: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      -
        name: Sign commit and push changes
        run: |
          touch README.md
          git add .
          git commit -S -m "This commit is signed!"
          git push
      -
        name: List keys
        run: gpg -K
      - name: Configure Git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "clescot"
          git config --global user.signingkey "{{ secrets.GPG_KEY_ID }}"
          git config --global commit.gpgsign true
      - name: diagnose
        run: |
          gpgconf
      - name: Release
        uses: qcastel/github-actions-maven-release@v1.12.37
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}
          version-patch: true
          gpg-enabled: "true"
          gpg-key-id: "${{ secrets.GPG_KEY_ID }}"
          gpg-key: "${{ secrets.GPG_KEY }}"
          gpg-passphrase: "${{ secrets.GPG_PASSPHRASE }}"
          maven-args: " -X -Pgithub -DskipIT -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} "
          maven-servers: '[{"id": "github", "username": "$GITHUB_ACTOR", "password": "${{ secrets.GITHUB_TOKEN }}"}]'
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk/
      - name: Get tag name
        id: tag-name
        run: |
          export TAG=$(git describe --tags --abbrev=0 HEAD~)
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag-name.outputs.TAG }}
          artifacts: "core/target/*.jar,archive/target/components/packages/*.zip"
          generateReleaseNotes: true


